/** Declaration file generated by dts-gen */

export class Contract {
    constructor(addressOrName: any, contractInterface: any, signerOrProvider: any, ...args: any[]);

    connect(signerOrProvider: any): any;

    static getDeployTransaction(bytecode: any, contractInterface: any, ...args: any[]): any;

}

export class Wallet {
    constructor(privateKey: any, provider: any);

    encrypt(password: any, options: any, progressCallback: any): any;

    estimateGas(transaction: any): any;

    getAddress(): any;

    getBalance(blockTag: any): any;

    getTransactionCount(blockTag: any): any;

    send(addressOrName: any, amountWei: any, options: any): any;

    sendTransaction(transaction: any): any;

    signMessage(message: any): any;

    static createRandom(options: any): any;

    static fromBrainWallet(username: any, password: any, progressCallback: any): any;

    static fromEncryptedWallet(json: any, password: any, progressCallback: any): any;

    static fromMnemonic(mnemonic: any, path: any): any;

    static isEncryptedWallet(json: any): any;

    static parseTransaction(rawTransaction: any): any;

    static verifyMessage(message: any, signature: any): any;

}

export const networks: {
    classic: {
        chainId: number;
        name: string;
    };
    homestead: {
        chainId: number;
        ensAddress: string;
        name: string;
    };
    kovan: {
        chainId: number;
        name: string;
    };
    mainnet: {
        chainId: number;
        ensAddress: string;
        name: string;
    };
    morden: {
        chainId: number;
        name: string;
    };
    rinkeby: {
        chainId: number;
        name: string;
    };
    ropsten: {
        chainId: number;
        ensAddress: string;
        name: string;
    };
    testnet: {
        chainId: number;
        ensAddress: string;
        name: string;
    };
    unspecified: {
        chainId: number;
        name: string;
    };
};

export const version: string;

export function Interface(abi: any, ...args: any[]): any;

export function SigningKey(privateKey: any): any;

export namespace Contract {
    namespace getDeployTransaction {
        const prototype: {
        };

    }

    namespace prototype {
        function connect(signerOrProvider: any): any;

        namespace connect {
            const prototype: {
            };

        }

    }

}

export namespace HDNode {
    function entropyToMnemonic(entropy: any): any;

    function fromMnemonic(mnemonic: any): any;

    function fromSeed(seed: any): any;

    function isValidMnemonic(mnemonic: any): any;

    function mnemonicToEntropy(mnemonic: any): any;

    function mnemonicToSeed(mnemonic: any, password: any): any;

    namespace entropyToMnemonic {
        const prototype: {
        };

    }

    namespace fromMnemonic {
        const prototype: {
        };

    }

    namespace fromSeed {
        const prototype: {
        };

    }

    namespace isValidMnemonic {
        const prototype: {
        };

    }

    namespace mnemonicToEntropy {
        const prototype: {
        };

    }

    namespace mnemonicToSeed {
        const prototype: {
        };

    }

}

export namespace Interface {
    const prototype: {
    };

}

export namespace SigningKey {
    const prototype: {
    };

    function getPublicKey(value: any, compressed: any): any;

    function publicKeyToAddress(publicKey: any): any;

    function recover(digest: any, r: any, s: any, recoveryParam: any): any;

    namespace getPublicKey {
        const prototype: {
        };

    }

    namespace publicKeyToAddress {
        const prototype: {
        };

    }

    namespace recover {
        const prototype: {
        };

    }

}

export namespace Wallet {
    namespace createRandom {
        const prototype: {
        };

    }

    namespace fromBrainWallet {
        const prototype: {
        };

    }

    namespace fromEncryptedWallet {
        const prototype: {
        };

    }

    namespace fromMnemonic {
        const prototype: {
        };

    }

    namespace isEncryptedWallet {
        const prototype: {
        };

    }

    namespace parseTransaction {
        const prototype: {
        };

    }

    namespace prototype {
        function encrypt(password: any, options: any, progressCallback: any): any;

        function estimateGas(transaction: any): any;

        function getAddress(): any;

        function getBalance(blockTag: any): any;

        function getTransactionCount(blockTag: any): any;

        function send(addressOrName: any, amountWei: any, options: any): any;

        function sendTransaction(transaction: any): any;

        function signMessage(message: any): any;

        namespace encrypt {
            const prototype: {
            };

        }

        namespace estimateGas {
            const prototype: {
            };

        }

        namespace getAddress {
            const prototype: {
            };

        }

        namespace getBalance {
            const prototype: {
            };

        }

        namespace getTransactionCount {
            const prototype: {
            };

        }

        namespace send {
            const prototype: {
            };

        }

        namespace sendTransaction {
            const prototype: {
            };

        }

        namespace signMessage {
            const prototype: {
            };

        }

    }

    namespace verifyMessage {
        const prototype: {
        };

    }

}

export namespace providers {
    class EtherscanProvider extends Provider {
        constructor(network: any, apiKey: any);

        getHistory(addressOrName: any, startBlock: any, endBlock: any): any;

        perform(method: any, params: any): any;

        static inherits(child: any): void;

    }

    class FallbackProvider extends Provider {
        constructor(providers: any);

        perform(method: any, params: any): any;

    }

    class InfuraProvider extends Provider {
        constructor(network: any, apiAccessToken?: any);

        static inherits(child: any): void;

    }

    class JsonRpcProvider extends Provider {
        constructor(url: any, network: any, ...args: any[]);

        perform(method: any, params: any): any;

        send(method: any, params: any): any;

        static inherits(child: any): void;

    }

    class Provider {
        constructor(network: any);

        call(transaction: any): any;

        doPoll(): void;

        emit(eventName: any, ...args: any[]): void;

        estimateGas(transaction: any): any;

        getBalance(addressOrName: any, blockTag: any): any;

        getBlock(blockHashOrBlockTag: any): any;

        getBlockNumber(): any;

        getCode(addressOrName: any, blockTag: any): any;

        getEtherPrice(): any;

        getGasPrice(): any;

        getLogs(filter: any): any;

        getStorageAt(addressOrName: any, position: any, blockTag: any): any;

        getTransaction(transactionHash: any): any;

        getTransactionCount(addressOrName: any, blockTag: any): any;

        getTransactionReceipt(transactionHash: any): any;

        listenerCount(eventName: any): any;

        listeners(eventName: any): any;

        lookupAddress(address: any): any;

        on(eventName: any, listener: any): void;

        once(eventName: any, listener: any): void;

        perform(method: any, params: any): any;

        removeAllListeners(eventName: any): void;

        removeListener(eventName: any, listener: any): any;

        resolveName(name: any): any;

        sendTransaction(signedTransaction: any): any;

        waitForTransaction(transactionHash: any, timeout: any): any;

        static fetchJSON(url: any, json: any, processFunc: any): any;

        static getNetwork(network: any): any;

        static inherits(child: any): void;

        static networks: {
            classic: {
                chainId: number;
                name: string;
            };
            homestead: {
                chainId: number;
                ensAddress: string;
                name: string;
            };
            kovan: {
                chainId: number;
                name: string;
            };
            mainnet: {
                chainId: number;
                ensAddress: string;
                name: string;
            };
            morden: {
                chainId: number;
                name: string;
            };
            rinkeby: {
                chainId: number;
                name: string;
            };
            ropsten: {
                chainId: number;
                ensAddress: string;
                name: string;
            };
            testnet: {
                chainId: number;
                ensAddress: string;
                name: string;
            };
            unspecified: {
                chainId: number;
                name: string;
            };
        };

    }

    class Web3Provider {
        constructor(web3Provider: any, network: any);

        getSigner(address: any): any;

        listAccounts(): any;

        send(method: any, params: any): any;

        static inherits(child: any): void;

    }

    const isProvider: any;

    const networks: {
        classic: {
            chainId: number;
            name: string;
        };
        homestead: {
            chainId: number;
            ensAddress: string;
            name: string;
        };
        kovan: {
            chainId: number;
            name: string;
        };
        mainnet: {
            chainId: number;
            ensAddress: string;
            name: string;
        };
        morden: {
            chainId: number;
            name: string;
        };
        rinkeby: {
            chainId: number;
            name: string;
        };
        ropsten: {
            chainId: number;
            ensAddress: string;
            name: string;
        };
        testnet: {
            chainId: number;
            ensAddress: string;
            name: string;
        };
        unspecified: {
            chainId: number;
            name: string;
        };
    };

    function getDefaultProvider(network: any): any;

    namespace EtherscanProvider {
        namespace inherits {
            const prototype: {
            };

        }

        namespace prototype {
            function call(transaction: any): any;

            function doPoll(): void;

            function emit(eventName: any, ...args: any[]): void;

            function estimateGas(transaction: any): any;

            function getBalance(addressOrName: any, blockTag: any): any;

            function getBlock(blockHashOrBlockTag: any): any;

            function getBlockNumber(): any;

            function getCode(addressOrName: any, blockTag: any): any;

            function getEtherPrice(): any;

            function getGasPrice(): any;

            function getHistory(addressOrName: any, startBlock: any, endBlock: any): any;

            function getLogs(filter: any): any;

            function getStorageAt(addressOrName: any, position: any, blockTag: any): any;

            function getTransaction(transactionHash: any): any;

            function getTransactionCount(addressOrName: any, blockTag: any): any;

            function getTransactionReceipt(transactionHash: any): any;

            function listenerCount(eventName: any): any;

            function listeners(eventName: any): any;

            function lookupAddress(address: any): any;

            function on(eventName: any, listener: any): void;

            function once(eventName: any, listener: any): void;

            function perform(method: any, params: any): any;

            function removeAllListeners(eventName: any): void;

            function removeListener(eventName: any, listener: any): any;

            function resolveName(name: any): any;

            function sendTransaction(signedTransaction: any): any;

            function waitForTransaction(transactionHash: any, timeout: any): any;

            namespace call {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.call
                const prototype: any;

            }

            namespace doPoll {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.doPoll
                const prototype: any;

            }

            namespace emit {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.emit
                const prototype: any;

            }

            namespace estimateGas {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.estimateGas
                const prototype: any;

            }

            namespace getBalance {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getBalance
                const prototype: any;

            }

            namespace getBlock {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getBlock
                const prototype: any;

            }

            namespace getBlockNumber {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getBlockNumber
                const prototype: any;

            }

            namespace getCode {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getCode
                const prototype: any;

            }

            namespace getEtherPrice {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getEtherPrice
                const prototype: any;

            }

            namespace getGasPrice {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getGasPrice
                const prototype: any;

            }

            namespace getHistory {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getHistory
                const prototype: any;

            }

            namespace getLogs {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getLogs
                const prototype: any;

            }

            namespace getStorageAt {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getStorageAt
                const prototype: any;

            }

            namespace getTransaction {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getTransaction
                const prototype: any;

            }

            namespace getTransactionCount {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getTransactionCount
                const prototype: any;

            }

            namespace getTransactionReceipt {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.getTransactionReceipt
                const prototype: any;

            }

            namespace listenerCount {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.listenerCount
                const prototype: any;

            }

            namespace listeners {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.listeners
                const prototype: any;

            }

            namespace lookupAddress {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.lookupAddress
                const prototype: any;

            }

            namespace on {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.on
                const prototype: any;

            }

            namespace once {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.once
                const prototype: any;

            }

            namespace perform {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.perform
                const prototype: any;

            }

            namespace removeAllListeners {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.removeAllListeners
                const prototype: any;

            }

            namespace removeListener {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.removeListener
                const prototype: any;

            }

            namespace resolveName {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.resolveName
                const prototype: any;

            }

            namespace sendTransaction {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.sendTransaction
                const prototype: any;

            }

            namespace waitForTransaction {
                // Too-deep object hierarchy from ethers.providers.EtherscanProvider.prototype.waitForTransaction
                const prototype: any;

            }

        }

    }

    namespace FallbackProvider {
        namespace prototype {
            function call(transaction: any): any;

            function doPoll(): void;

            function emit(eventName: any, ...args: any[]): void;

            function estimateGas(transaction: any): any;

            function getBalance(addressOrName: any, blockTag: any): any;

            function getBlock(blockHashOrBlockTag: any): any;

            function getBlockNumber(): any;

            function getCode(addressOrName: any, blockTag: any): any;

            function getEtherPrice(): any;

            function getGasPrice(): any;

            function getLogs(filter: any): any;

            function getStorageAt(addressOrName: any, position: any, blockTag: any): any;

            function getTransaction(transactionHash: any): any;

            function getTransactionCount(addressOrName: any, blockTag: any): any;

            function getTransactionReceipt(transactionHash: any): any;

            function listenerCount(eventName: any): any;

            function listeners(eventName: any): any;

            function lookupAddress(address: any): any;

            function on(eventName: any, listener: any): void;

            function once(eventName: any, listener: any): void;

            function perform(method: any, params: any): any;

            function removeAllListeners(eventName: any): void;

            function removeListener(eventName: any, listener: any): any;

            function resolveName(name: any): any;

            function sendTransaction(signedTransaction: any): any;

            function waitForTransaction(transactionHash: any, timeout: any): any;

            namespace call {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.call
                const prototype: any;

            }

            namespace doPoll {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.doPoll
                const prototype: any;

            }

            namespace emit {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.emit
                const prototype: any;

            }

            namespace estimateGas {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.estimateGas
                const prototype: any;

            }

            namespace getBalance {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getBalance
                const prototype: any;

            }

            namespace getBlock {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getBlock
                const prototype: any;

            }

            namespace getBlockNumber {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getBlockNumber
                const prototype: any;

            }

            namespace getCode {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getCode
                const prototype: any;

            }

            namespace getEtherPrice {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getEtherPrice
                const prototype: any;

            }

            namespace getGasPrice {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getGasPrice
                const prototype: any;

            }

            namespace getLogs {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getLogs
                const prototype: any;

            }

            namespace getStorageAt {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getStorageAt
                const prototype: any;

            }

            namespace getTransaction {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getTransaction
                const prototype: any;

            }

            namespace getTransactionCount {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getTransactionCount
                const prototype: any;

            }

            namespace getTransactionReceipt {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.getTransactionReceipt
                const prototype: any;

            }

            namespace listenerCount {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.listenerCount
                const prototype: any;

            }

            namespace listeners {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.listeners
                const prototype: any;

            }

            namespace lookupAddress {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.lookupAddress
                const prototype: any;

            }

            namespace on {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.on
                const prototype: any;

            }

            namespace once {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.once
                const prototype: any;

            }

            namespace perform {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.perform
                const prototype: any;

            }

            namespace removeAllListeners {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.removeAllListeners
                const prototype: any;

            }

            namespace removeListener {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.removeListener
                const prototype: any;

            }

            namespace resolveName {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.resolveName
                const prototype: any;

            }

            namespace sendTransaction {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.sendTransaction
                const prototype: any;

            }

            namespace waitForTransaction {
                // Too-deep object hierarchy from ethers.providers.FallbackProvider.prototype.waitForTransaction
                const prototype: any;

            }

        }

    }

    namespace InfuraProvider {
        namespace inherits {
            const prototype: {
            };

        }

        namespace prototype {
            function call(transaction: any): any;

            function doPoll(): void;

            function emit(eventName: any, ...args: any[]): void;

            function estimateGas(transaction: any): any;

            function getBalance(addressOrName: any, blockTag: any): any;

            function getBlock(blockHashOrBlockTag: any): any;

            function getBlockNumber(): any;

            function getCode(addressOrName: any, blockTag: any): any;

            function getEtherPrice(): any;

            function getGasPrice(): any;

            function getLogs(filter: any): any;

            function getStorageAt(addressOrName: any, position: any, blockTag: any): any;

            function getTransaction(transactionHash: any): any;

            function getTransactionCount(addressOrName: any, blockTag: any): any;

            function getTransactionReceipt(transactionHash: any): any;

            function listenerCount(eventName: any): any;

            function listeners(eventName: any): any;

            function lookupAddress(address: any): any;

            function on(eventName: any, listener: any): void;

            function once(eventName: any, listener: any): void;

            function perform(method: any, params: any): any;

            function removeAllListeners(eventName: any): void;

            function removeListener(eventName: any, listener: any): any;

            function resolveName(name: any): any;

            function send(method: any, params: any): any;

            function sendTransaction(signedTransaction: any): any;

            function waitForTransaction(transactionHash: any, timeout: any): any;

            namespace call {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.call
                const prototype: any;

            }

            namespace doPoll {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.doPoll
                const prototype: any;

            }

            namespace emit {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.emit
                const prototype: any;

            }

            namespace estimateGas {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.estimateGas
                const prototype: any;

            }

            namespace getBalance {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getBalance
                const prototype: any;

            }

            namespace getBlock {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getBlock
                const prototype: any;

            }

            namespace getBlockNumber {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getBlockNumber
                const prototype: any;

            }

            namespace getCode {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getCode
                const prototype: any;

            }

            namespace getEtherPrice {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getEtherPrice
                const prototype: any;

            }

            namespace getGasPrice {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getGasPrice
                const prototype: any;

            }

            namespace getLogs {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getLogs
                const prototype: any;

            }

            namespace getStorageAt {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getStorageAt
                const prototype: any;

            }

            namespace getTransaction {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getTransaction
                const prototype: any;

            }

            namespace getTransactionCount {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getTransactionCount
                const prototype: any;

            }

            namespace getTransactionReceipt {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.getTransactionReceipt
                const prototype: any;

            }

            namespace listenerCount {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.listenerCount
                const prototype: any;

            }

            namespace listeners {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.listeners
                const prototype: any;

            }

            namespace lookupAddress {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.lookupAddress
                const prototype: any;

            }

            namespace on {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.on
                const prototype: any;

            }

            namespace once {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.once
                const prototype: any;

            }

            namespace perform {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.perform
                const prototype: any;

            }

            namespace removeAllListeners {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.removeAllListeners
                const prototype: any;

            }

            namespace removeListener {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.removeListener
                const prototype: any;

            }

            namespace resolveName {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.resolveName
                const prototype: any;

            }

            namespace send {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.send
                const prototype: any;

            }

            namespace sendTransaction {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.sendTransaction
                const prototype: any;

            }

            namespace waitForTransaction {
                // Too-deep object hierarchy from ethers.providers.InfuraProvider.prototype.waitForTransaction
                const prototype: any;

            }

        }

    }

    namespace JsonRpcProvider {
        namespace inherits {
            const prototype: {
            };

        }

        namespace prototype {
            function call(transaction: any): any;

            function doPoll(): void;

            function emit(eventName: any, ...args: any[]): void;

            function estimateGas(transaction: any): any;

            function getBalance(addressOrName: any, blockTag: any): any;

            function getBlock(blockHashOrBlockTag: any): any;

            function getBlockNumber(): any;

            function getCode(addressOrName: any, blockTag: any): any;

            function getEtherPrice(): any;

            function getGasPrice(): any;

            function getLogs(filter: any): any;

            function getStorageAt(addressOrName: any, position: any, blockTag: any): any;

            function getTransaction(transactionHash: any): any;

            function getTransactionCount(addressOrName: any, blockTag: any): any;

            function getTransactionReceipt(transactionHash: any): any;

            function listenerCount(eventName: any): any;

            function listeners(eventName: any): any;

            function lookupAddress(address: any): any;

            function on(eventName: any, listener: any): void;

            function once(eventName: any, listener: any): void;

            function perform(method: any, params: any): any;

            function removeAllListeners(eventName: any): void;

            function removeListener(eventName: any, listener: any): any;

            function resolveName(name: any): any;

            function send(method: any, params: any): any;

            function sendTransaction(signedTransaction: any): any;

            function waitForTransaction(transactionHash: any, timeout: any): any;

            namespace call {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.call
                const prototype: any;

            }

            namespace doPoll {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.doPoll
                const prototype: any;

            }

            namespace emit {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.emit
                const prototype: any;

            }

            namespace estimateGas {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.estimateGas
                const prototype: any;

            }

            namespace getBalance {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getBalance
                const prototype: any;

            }

            namespace getBlock {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getBlock
                const prototype: any;

            }

            namespace getBlockNumber {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getBlockNumber
                const prototype: any;

            }

            namespace getCode {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getCode
                const prototype: any;

            }

            namespace getEtherPrice {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getEtherPrice
                const prototype: any;

            }

            namespace getGasPrice {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getGasPrice
                const prototype: any;

            }

            namespace getLogs {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getLogs
                const prototype: any;

            }

            namespace getStorageAt {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getStorageAt
                const prototype: any;

            }

            namespace getTransaction {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getTransaction
                const prototype: any;

            }

            namespace getTransactionCount {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getTransactionCount
                const prototype: any;

            }

            namespace getTransactionReceipt {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.getTransactionReceipt
                const prototype: any;

            }

            namespace listenerCount {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.listenerCount
                const prototype: any;

            }

            namespace listeners {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.listeners
                const prototype: any;

            }

            namespace lookupAddress {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.lookupAddress
                const prototype: any;

            }

            namespace on {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.on
                const prototype: any;

            }

            namespace once {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.once
                const prototype: any;

            }

            namespace perform {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.perform
                const prototype: any;

            }

            namespace removeAllListeners {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.removeAllListeners
                const prototype: any;

            }

            namespace removeListener {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.removeListener
                const prototype: any;

            }

            namespace resolveName {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.resolveName
                const prototype: any;

            }

            namespace send {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.send
                const prototype: any;

            }

            namespace sendTransaction {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.sendTransaction
                const prototype: any;

            }

            namespace waitForTransaction {
                // Too-deep object hierarchy from ethers.providers.JsonRpcProvider.prototype.waitForTransaction
                const prototype: any;

            }

        }

    }

    namespace Provider {
        namespace fetchJSON {
            const prototype: {
            };

        }

        namespace getNetwork {
            const prototype: {
            };

        }

        namespace inherits {
            const prototype: {
            };

        }

        namespace prototype {
            function call(transaction: any): any;

            function doPoll(): void;

            function emit(eventName: any, ...args: any[]): void;

            function estimateGas(transaction: any): any;

            function getBalance(addressOrName: any, blockTag: any): any;

            function getBlock(blockHashOrBlockTag: any): any;

            function getBlockNumber(): any;

            function getCode(addressOrName: any, blockTag: any): any;

            function getEtherPrice(): any;

            function getGasPrice(): any;

            function getLogs(filter: any): any;

            function getStorageAt(addressOrName: any, position: any, blockTag: any): any;

            function getTransaction(transactionHash: any): any;

            function getTransactionCount(addressOrName: any, blockTag: any): any;

            function getTransactionReceipt(transactionHash: any): any;

            function listenerCount(eventName: any): any;

            function listeners(eventName: any): any;

            function lookupAddress(address: any): any;

            function on(eventName: any, listener: any): void;

            function once(eventName: any, listener: any): void;

            function perform(method: any, params: any): any;

            function removeAllListeners(eventName: any): void;

            function removeListener(eventName: any, listener: any): any;

            function resolveName(name: any): any;

            function sendTransaction(signedTransaction: any): any;

            function waitForTransaction(transactionHash: any, timeout: any): any;

            namespace call {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.call
                const prototype: any;

            }

            namespace doPoll {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.doPoll
                const prototype: any;

            }

            namespace emit {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.emit
                const prototype: any;

            }

            namespace estimateGas {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.estimateGas
                const prototype: any;

            }

            namespace getBalance {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getBalance
                const prototype: any;

            }

            namespace getBlock {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getBlock
                const prototype: any;

            }

            namespace getBlockNumber {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getBlockNumber
                const prototype: any;

            }

            namespace getCode {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getCode
                const prototype: any;

            }

            namespace getEtherPrice {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getEtherPrice
                const prototype: any;

            }

            namespace getGasPrice {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getGasPrice
                const prototype: any;

            }

            namespace getLogs {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getLogs
                const prototype: any;

            }

            namespace getStorageAt {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getStorageAt
                const prototype: any;

            }

            namespace getTransaction {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getTransaction
                const prototype: any;

            }

            namespace getTransactionCount {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getTransactionCount
                const prototype: any;

            }

            namespace getTransactionReceipt {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.getTransactionReceipt
                const prototype: any;

            }

            namespace listenerCount {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.listenerCount
                const prototype: any;

            }

            namespace listeners {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.listeners
                const prototype: any;

            }

            namespace lookupAddress {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.lookupAddress
                const prototype: any;

            }

            namespace on {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.on
                const prototype: any;

            }

            namespace once {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.once
                const prototype: any;

            }

            namespace perform {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.perform
                const prototype: any;

            }

            namespace removeAllListeners {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.removeAllListeners
                const prototype: any;

            }

            namespace removeListener {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.removeListener
                const prototype: any;

            }

            namespace resolveName {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.resolveName
                const prototype: any;

            }

            namespace sendTransaction {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.sendTransaction
                const prototype: any;

            }

            namespace waitForTransaction {
                // Too-deep object hierarchy from ethers.providers.Provider.prototype.waitForTransaction
                const prototype: any;

            }

        }

    }

    namespace Web3Provider {
        namespace inherits {
            const prototype: {
            };

        }

        namespace prototype {
            function call(transaction: any): any;

            function doPoll(): void;

            function emit(eventName: any, ...args: any[]): void;

            function estimateGas(transaction: any): any;

            function getBalance(addressOrName: any, blockTag: any): any;

            function getBlock(blockHashOrBlockTag: any): any;

            function getBlockNumber(): any;

            function getCode(addressOrName: any, blockTag: any): any;

            function getEtherPrice(): any;

            function getGasPrice(): any;

            function getLogs(filter: any): any;

            function getSigner(address: any): any;

            function getStorageAt(addressOrName: any, position: any, blockTag: any): any;

            function getTransaction(transactionHash: any): any;

            function getTransactionCount(addressOrName: any, blockTag: any): any;

            function getTransactionReceipt(transactionHash: any): any;

            function listAccounts(): any;

            function listenerCount(eventName: any): any;

            function listeners(eventName: any): any;

            function lookupAddress(address: any): any;

            function on(eventName: any, listener: any): void;

            function once(eventName: any, listener: any): void;

            function perform(method: any, params: any): any;

            function removeAllListeners(eventName: any): void;

            function removeListener(eventName: any, listener: any): any;

            function resolveName(name: any): any;

            function send(method: any, params: any): any;

            function sendTransaction(signedTransaction: any): any;

            function waitForTransaction(transactionHash: any, timeout: any): any;

            namespace call {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.call
                const prototype: any;

            }

            namespace doPoll {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.doPoll
                const prototype: any;

            }

            namespace emit {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.emit
                const prototype: any;

            }

            namespace estimateGas {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.estimateGas
                const prototype: any;

            }

            namespace getBalance {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getBalance
                const prototype: any;

            }

            namespace getBlock {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getBlock
                const prototype: any;

            }

            namespace getBlockNumber {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getBlockNumber
                const prototype: any;

            }

            namespace getCode {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getCode
                const prototype: any;

            }

            namespace getEtherPrice {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getEtherPrice
                const prototype: any;

            }

            namespace getGasPrice {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getGasPrice
                const prototype: any;

            }

            namespace getLogs {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getLogs
                const prototype: any;

            }

            namespace getSigner {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getSigner
                const prototype: any;

            }

            namespace getStorageAt {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getStorageAt
                const prototype: any;

            }

            namespace getTransaction {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getTransaction
                const prototype: any;

            }

            namespace getTransactionCount {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getTransactionCount
                const prototype: any;

            }

            namespace getTransactionReceipt {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.getTransactionReceipt
                const prototype: any;

            }

            namespace listAccounts {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.listAccounts
                const prototype: any;

            }

            namespace listenerCount {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.listenerCount
                const prototype: any;

            }

            namespace listeners {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.listeners
                const prototype: any;

            }

            namespace lookupAddress {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.lookupAddress
                const prototype: any;

            }

            namespace on {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.on
                const prototype: any;

            }

            namespace once {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.once
                const prototype: any;

            }

            namespace perform {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.perform
                const prototype: any;

            }

            namespace removeAllListeners {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.removeAllListeners
                const prototype: any;

            }

            namespace removeListener {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.removeListener
                const prototype: any;

            }

            namespace resolveName {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.resolveName
                const prototype: any;

            }

            namespace send {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.send
                const prototype: any;

            }

            namespace sendTransaction {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.sendTransaction
                const prototype: any;

            }

            namespace waitForTransaction {
                // Too-deep object hierarchy from ethers.providers.Web3Provider.prototype.waitForTransaction
                const prototype: any;

            }

        }

    }

    namespace getDefaultProvider {
        const prototype: {
        };

    }

}

export namespace utils {
    class AbiCoder {
        constructor(coerceFunc: any);

        decode(names: any, types: any, data: any, ...args: any[]): any;

        encode(names: any, types: any, values: any, ...args: any[]): any;

    }

    class BigNumber {
        constructor(value: any);

        add(other: any): any;

        div(other: any): any;

        eq(other: any): any;

        fromTwos(value: any): any;

        gt(other: any): any;

        gte(other: any): any;

        isZero(): any;

        lt(other: any): any;

        lte(other: any): any;

        maskn(value: any): any;

        mod(other: any): any;

        mul(other: any): any;

        pow(other: any): any;

        sub(other: any): any;

        toHexString(): any;

        toNumber(base: any): any;

        toString(): any;

        toTwos(value: any): any;

    }

    const etherSymbol: string;

    function arrayify(value: any, name: any): any;

    function bigNumberify(value: any): any;

    function concat(objects: any): any;

    function defineProperty(object: any, name: any, value: any): void;

    function formatEther(wei: any, options: any): any;

    function formatUnits(value: any, unitType: any, options: any): any;

    function getAddress(address: any, icapFormat: any): any;

    function getContractAddress(transaction: any): any;

    function hexlify(value: any, name: any): any;

    function id(text: any): any;

    function keccak256(data: any): any;

    function namehash(name: any, depth: any): any;

    function padZeros(value: any, length: any): any;

    function parseEther(ether: any): any;

    function parseUnits(value: any, unitType: any): any;

    function randomBytes(length: any): any;

    function sha256(data: any): any;

    function solidityKeccak256(types: any, values: any): any;

    function solidityPack(types: any, values: any): any;

    function soliditySha256(types: any, values: any): any;

    function stripZeros(value: any): any;

    function toUtf8Bytes(str: any): any;

    function toUtf8String(bytes: any): any;

    namespace AbiCoder {
        namespace defaultCoder {
            function coerceFunc(type: any, value: any): any;

            function decode(names: any, types: any, data: any, ...args: any[]): any;

            function encode(names: any, types: any, values: any, ...args: any[]): any;

            namespace coerceFunc {
                // Too-deep object hierarchy from ethers.utils.AbiCoder.defaultCoder.coerceFunc
                const prototype: any;

            }

            namespace decode {
                // Too-deep object hierarchy from ethers.utils.AbiCoder.defaultCoder.decode
                const prototype: any;

            }

            namespace encode {
                // Too-deep object hierarchy from ethers.utils.AbiCoder.defaultCoder.encode
                const prototype: any;

            }

        }

        namespace prototype {
            function decode(names: any, types: any, data: any, ...args: any[]): any;

            function encode(names: any, types: any, values: any, ...args: any[]): any;

            namespace decode {
                // Too-deep object hierarchy from ethers.utils.AbiCoder.prototype.decode
                const prototype: any;

            }

            namespace encode {
                // Too-deep object hierarchy from ethers.utils.AbiCoder.prototype.encode
                const prototype: any;

            }

        }

    }

    namespace BigNumber {
        namespace constantNegativeOne {
            function add(other: any): any;

            function div(other: any): any;

            function eq(other: any): any;

            function fromTwos(value: any): any;

            function gt(other: any): any;

            function gte(other: any): any;

            function isZero(): any;

            function lt(other: any): any;

            function lte(other: any): any;

            function maskn(value: any): any;

            function mod(other: any): any;

            function mul(other: any): any;

            function pow(other: any): any;

            function sub(other: any): any;

            function toHexString(): any;

            function toNumber(base: any): any;

            function toString(): any;

            function toTwos(value: any): any;

            namespace add {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.add
                const prototype: any;

            }

            namespace div {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.div
                const prototype: any;

            }

            namespace eq {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.eq
                const prototype: any;

            }

            namespace fromTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.fromTwos
                const prototype: any;

            }

            namespace gt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.gt
                const prototype: any;

            }

            namespace gte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.gte
                const prototype: any;

            }

            namespace isZero {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.isZero
                const prototype: any;

            }

            namespace lt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.lt
                const prototype: any;

            }

            namespace lte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.lte
                const prototype: any;

            }

            namespace maskn {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.maskn
                const prototype: any;

            }

            namespace mod {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.mod
                const prototype: any;

            }

            namespace mul {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.mul
                const prototype: any;

            }

            namespace pow {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.pow
                const prototype: any;

            }

            namespace sub {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.sub
                const prototype: any;

            }

            namespace toHexString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.toHexString
                const prototype: any;

            }

            namespace toNumber {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.toNumber
                const prototype: any;

            }

            namespace toString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.toString
                const prototype: any;

            }

            namespace toTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantNegativeOne.toTwos
                const prototype: any;

            }

        }

        namespace constantOne {
            function add(other: any): any;

            function div(other: any): any;

            function eq(other: any): any;

            function fromTwos(value: any): any;

            function gt(other: any): any;

            function gte(other: any): any;

            function isZero(): any;

            function lt(other: any): any;

            function lte(other: any): any;

            function maskn(value: any): any;

            function mod(other: any): any;

            function mul(other: any): any;

            function pow(other: any): any;

            function sub(other: any): any;

            function toHexString(): any;

            function toNumber(base: any): any;

            function toString(): any;

            function toTwos(value: any): any;

            namespace add {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.add
                const prototype: any;

            }

            namespace div {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.div
                const prototype: any;

            }

            namespace eq {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.eq
                const prototype: any;

            }

            namespace fromTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.fromTwos
                const prototype: any;

            }

            namespace gt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.gt
                const prototype: any;

            }

            namespace gte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.gte
                const prototype: any;

            }

            namespace isZero {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.isZero
                const prototype: any;

            }

            namespace lt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.lt
                const prototype: any;

            }

            namespace lte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.lte
                const prototype: any;

            }

            namespace maskn {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.maskn
                const prototype: any;

            }

            namespace mod {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.mod
                const prototype: any;

            }

            namespace mul {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.mul
                const prototype: any;

            }

            namespace pow {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.pow
                const prototype: any;

            }

            namespace sub {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.sub
                const prototype: any;

            }

            namespace toHexString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.toHexString
                const prototype: any;

            }

            namespace toNumber {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.toNumber
                const prototype: any;

            }

            namespace toString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.toString
                const prototype: any;

            }

            namespace toTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantOne.toTwos
                const prototype: any;

            }

        }

        namespace constantTwo {
            function add(other: any): any;

            function div(other: any): any;

            function eq(other: any): any;

            function fromTwos(value: any): any;

            function gt(other: any): any;

            function gte(other: any): any;

            function isZero(): any;

            function lt(other: any): any;

            function lte(other: any): any;

            function maskn(value: any): any;

            function mod(other: any): any;

            function mul(other: any): any;

            function pow(other: any): any;

            function sub(other: any): any;

            function toHexString(): any;

            function toNumber(base: any): any;

            function toString(): any;

            function toTwos(value: any): any;

            namespace add {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.add
                const prototype: any;

            }

            namespace div {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.div
                const prototype: any;

            }

            namespace eq {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.eq
                const prototype: any;

            }

            namespace fromTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.fromTwos
                const prototype: any;

            }

            namespace gt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.gt
                const prototype: any;

            }

            namespace gte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.gte
                const prototype: any;

            }

            namespace isZero {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.isZero
                const prototype: any;

            }

            namespace lt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.lt
                const prototype: any;

            }

            namespace lte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.lte
                const prototype: any;

            }

            namespace maskn {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.maskn
                const prototype: any;

            }

            namespace mod {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.mod
                const prototype: any;

            }

            namespace mul {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.mul
                const prototype: any;

            }

            namespace pow {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.pow
                const prototype: any;

            }

            namespace sub {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.sub
                const prototype: any;

            }

            namespace toHexString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.toHexString
                const prototype: any;

            }

            namespace toNumber {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.toNumber
                const prototype: any;

            }

            namespace toString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.toString
                const prototype: any;

            }

            namespace toTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantTwo.toTwos
                const prototype: any;

            }

        }

        namespace constantWeiPerEther {
            function add(other: any): any;

            function div(other: any): any;

            function eq(other: any): any;

            function fromTwos(value: any): any;

            function gt(other: any): any;

            function gte(other: any): any;

            function isZero(): any;

            function lt(other: any): any;

            function lte(other: any): any;

            function maskn(value: any): any;

            function mod(other: any): any;

            function mul(other: any): any;

            function pow(other: any): any;

            function sub(other: any): any;

            function toHexString(): any;

            function toNumber(base: any): any;

            function toString(): any;

            function toTwos(value: any): any;

            namespace add {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.add
                const prototype: any;

            }

            namespace div {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.div
                const prototype: any;

            }

            namespace eq {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.eq
                const prototype: any;

            }

            namespace fromTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.fromTwos
                const prototype: any;

            }

            namespace gt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.gt
                const prototype: any;

            }

            namespace gte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.gte
                const prototype: any;

            }

            namespace isZero {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.isZero
                const prototype: any;

            }

            namespace lt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.lt
                const prototype: any;

            }

            namespace lte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.lte
                const prototype: any;

            }

            namespace maskn {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.maskn
                const prototype: any;

            }

            namespace mod {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.mod
                const prototype: any;

            }

            namespace mul {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.mul
                const prototype: any;

            }

            namespace pow {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.pow
                const prototype: any;

            }

            namespace sub {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.sub
                const prototype: any;

            }

            namespace toHexString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.toHexString
                const prototype: any;

            }

            namespace toNumber {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.toNumber
                const prototype: any;

            }

            namespace toString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.toString
                const prototype: any;

            }

            namespace toTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantWeiPerEther.toTwos
                const prototype: any;

            }

        }

        namespace constantZero {
            function add(other: any): any;

            function div(other: any): any;

            function eq(other: any): any;

            function fromTwos(value: any): any;

            function gt(other: any): any;

            function gte(other: any): any;

            function isZero(): any;

            function lt(other: any): any;

            function lte(other: any): any;

            function maskn(value: any): any;

            function mod(other: any): any;

            function mul(other: any): any;

            function pow(other: any): any;

            function sub(other: any): any;

            function toHexString(): any;

            function toNumber(base: any): any;

            function toString(): any;

            function toTwos(value: any): any;

            namespace add {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.add
                const prototype: any;

            }

            namespace div {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.div
                const prototype: any;

            }

            namespace eq {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.eq
                const prototype: any;

            }

            namespace fromTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.fromTwos
                const prototype: any;

            }

            namespace gt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.gt
                const prototype: any;

            }

            namespace gte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.gte
                const prototype: any;

            }

            namespace isZero {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.isZero
                const prototype: any;

            }

            namespace lt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.lt
                const prototype: any;

            }

            namespace lte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.lte
                const prototype: any;

            }

            namespace maskn {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.maskn
                const prototype: any;

            }

            namespace mod {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.mod
                const prototype: any;

            }

            namespace mul {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.mul
                const prototype: any;

            }

            namespace pow {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.pow
                const prototype: any;

            }

            namespace sub {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.sub
                const prototype: any;

            }

            namespace toHexString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.toHexString
                const prototype: any;

            }

            namespace toNumber {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.toNumber
                const prototype: any;

            }

            namespace toString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.toString
                const prototype: any;

            }

            namespace toTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.constantZero.toTwos
                const prototype: any;

            }

        }

        namespace prototype {
            function add(other: any): any;

            function div(other: any): any;

            function eq(other: any): any;

            function fromTwos(value: any): any;

            function gt(other: any): any;

            function gte(other: any): any;

            function isZero(): any;

            function lt(other: any): any;

            function lte(other: any): any;

            function maskn(value: any): any;

            function mod(other: any): any;

            function mul(other: any): any;

            function pow(other: any): any;

            function sub(other: any): any;

            function toHexString(): any;

            function toNumber(base: any): any;

            function toString(): any;

            function toTwos(value: any): any;

            namespace add {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.add
                const prototype: any;

            }

            namespace div {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.div
                const prototype: any;

            }

            namespace eq {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.eq
                const prototype: any;

            }

            namespace fromTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.fromTwos
                const prototype: any;

            }

            namespace gt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.gt
                const prototype: any;

            }

            namespace gte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.gte
                const prototype: any;

            }

            namespace isZero {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.isZero
                const prototype: any;

            }

            namespace lt {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.lt
                const prototype: any;

            }

            namespace lte {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.lte
                const prototype: any;

            }

            namespace maskn {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.maskn
                const prototype: any;

            }

            namespace mod {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.mod
                const prototype: any;

            }

            namespace mul {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.mul
                const prototype: any;

            }

            namespace pow {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.pow
                const prototype: any;

            }

            namespace sub {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.sub
                const prototype: any;

            }

            namespace toHexString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.toHexString
                const prototype: any;

            }

            namespace toNumber {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.toNumber
                const prototype: any;

            }

            namespace toString {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.toString
                const prototype: any;

            }

            namespace toTwos {
                // Too-deep object hierarchy from ethers.utils.BigNumber.prototype.toTwos
                const prototype: any;

            }

        }

    }

    namespace RLP {
        function decode(data: any): any;

        function encode(object: any): any;

        namespace decode {
            const prototype: {
            };

        }

        namespace encode {
            const prototype: {
            };

        }

    }

    namespace arrayify {
        const prototype: {
        };

    }

    namespace bigNumberify {
        const prototype: {
        };

    }

    namespace concat {
        const prototype: {
        };

    }

    namespace defineProperty {
        const prototype: {
        };

    }

    namespace formatEther {
        const prototype: {
        };

    }

    namespace formatUnits {
        const prototype: {
        };

    }

    namespace getAddress {
        const prototype: {
        };

    }

    namespace getContractAddress {
        const prototype: {
        };

    }

    namespace hexlify {
        const prototype: {
        };

    }

    namespace id {
        const prototype: {
        };

    }

    namespace keccak256 {
        const prototype: {
        };

    }

    namespace namehash {
        const prototype: {
        };

    }

    namespace padZeros {
        const prototype: {
        };

    }

    namespace parseEther {
        const prototype: {
        };

    }

    namespace parseUnits {
        const prototype: {
        };

    }

    namespace randomBytes {
        const prototype: {
        };

    }

    namespace sha256 {
        const prototype: {
        };

    }

    namespace solidityKeccak256 {
        const prototype: {
        };

    }

    namespace solidityPack {
        const prototype: {
        };

    }

    namespace soliditySha256 {
        const prototype: {
        };

    }

    namespace stripZeros {
        const prototype: {
        };

    }

    namespace toUtf8Bytes {
        const prototype: {
        };

    }

    namespace toUtf8String {
        const prototype: {
        };

    }

}

